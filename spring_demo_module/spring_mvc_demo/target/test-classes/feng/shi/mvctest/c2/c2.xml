<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
    <!--
     Configures a handler for serving static resources by forwarding to the Servlet container's default 
	 Servlet. Use of this handler allows using a "/" mapping with the DispatcherServlet while still utilizing 
	 the Servlet container to serve static resources. This handler will forward all requests to the default 
	 Servlet. Therefore it is important that it remains last in the order of all other URL HandlerMappings. 
	 That will be the case if you use the "annotation-driven" element or alternatively if you are setting up 
	 your customized HandlerMapping instance be sure to set its "order" property to a value lower than 
	 that of the DefaultServletHttpRequestHandler, which is Integer.MAX_VALUE.
     -->       
    <!--配置一个handler 处理静态资源的(css,js)
                         首先如果当前的DispatcherServlet的url-pattern为 / 的话 就会覆盖defaultServlet的配置 即 默认得不到匹配的 url请求都会走 DispatcherServlet而不是DefaultServlet了
                                 这样如果web.xml中没有别的更加明确的servlet-mapping的话 可以说所有请求都让DispatcherServlet处理
            如果使用传统方式解决静态资源重新交由defaultServlet处理的话  （ 因为defaultServlet是tomcat中内置的  %CATALINA_HOME%conf/web.xml) 名称为default
    e.g : <servlet-mapping>
               <servlet-name>default</servlet-name>
               <url-pattern>*.js</url-pattern> 
             <servlet-mapping>   
    -->     
      
    <mvc:default-servlet-handler />
    
    <!-- 
         ))) mvc:default-servlet-handler 的优点很明显 就是他会判断你当前使用的应用服务器的类型 找到相对应的defaultServlet的名称
        SimpleUrlHandlerMapping 配置一个 映射  /** =>  DefaultServletHttpRequestHandler(HttpRequestHandler) , 
                             最后是由HttpRequestHandlerAdapter处理
     -->
     
     
    <mvc:resources location="/static/" mapping="/static/**"/>

	<!--  id(spring中所谓的namebean的名称),name(spring中所谓的alias多个可以用逗号隔开)都可以,只要名称前面有 "/"斜杠  -->
<!-- 	<bean name="/hello" class="cjava.walker.testcase.c2.HelloWorldController" /> -->
	<bean id="helloController" name="/hello,/he/2" class="feng.shi.mvctest.c2.HelloWorldController" />

	<!-- HandlerMapping -->
<!-- 	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />  因为默认就会被加载到这里就不用自己创建了-->
	<!-- 1. 定义过的HandlerMapping 通常有两种类型的实现- 一是AbstractHandlerMethodMapping(3.1加的  主要有一个最终实现 RequestMappingHandlerMapping) 后续再讲
	             二是  AbstractUrlHandlerMapping
	             两者(或其父类)都是 在afterPropertiesSet 中对spring中所有bean进行查找 找到符合条件的bean 构造 url->handler之间的映射 
	  RequestMappingHandlerMapping 的映射都是 url->handler(HandlerMethod类型的)
	            而其他的话url->handler(类型是不确定的 ) 像这里   BeanNameUrlHandlerMapping得到的handler就是当前指定的 bean : HelloWorldController
	 -->

	<!-- HandlerAdapter -->
<!-- 	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" /> 因为默认就会被加载到这里就不用自己创建了 -->
	<!-- 2 。而 HandlerAdapter的作用  就是判断当前的handler自身是否支持 support(可以知道怎么应对) 然后就是 以自身的方式  让handler执行 (这里往往存在着很大的一种 约定= conventions)
	   这里的SimpleControllerHandlerAdapter专门处理  实现了 Controller接口的 handler 
	    经开涛一说 以及 "Adpater"这名称一看 这像一个适配器  将各种类型的 Handler 最后都已 ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;这种方式执行 最后返回ModleAndView
	   这看起来和传统的 接口适配很大区别 但这有种动态适配的意思 .... think twice!   
	-->
	
	
	<!-- ViewResolver -->  
	<!-- 3. 最后是viewResolve根据 ModelAndView中的view名称 来选择展示方式-找到对应的view实现  这里就是 JstlView ，最后是View "渲染" -->
	
	
	<bean id="viewResolver" class="feng.shi.support.DelegateViewResolver">
		<property name="defaultViewResolver" ref="ftlViewResolver" />
		<!-- <property name="resolvers">
			<map>
				<entry key="json">
					<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
						<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
						<property name="prefix" value="/WEB-INF/pages/json/" />
						<property name="suffix" value=".jsp" />
					</bean>
				</entry>
				<entry key="ftl" value-ref="ftlViewResolver" />
				<entry key="jsp">
					<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
						<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
						<property name="prefix" value="/WEB-INF/pages/jsp/" />
						<property name="suffix" value=".jsp" />
					</bean>
				</entry>
			</map>
		</property> -->
	</bean>
	
	<bean name="json;ftl" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/pages/json/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<bean name="jsp" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/pages/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="ftlViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="suffix" value=".ftl" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="viewClass" 	value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
	</bean>

	<!-- 配置Freemarker -->
	<bean id="freemarkerConfigurer"	class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="WEB-INF/pages/ftl" />
		<property name="freemarkerSettings"><!-- 如果模板不经常更新，此属性设置更新延迟时间 -->
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="number_format">0</prop>
				<prop key="defaultEncoding">UTF-8</prop>
				<!-- <prop key="auto_import">common/common.ftl as eu</prop> -->
			</props>
		</property>
	</bean>

<!--     还可以根据自己,项目情况自定义HandlerExceptionResovler 在指定的情况(指定的异常)跳转指定的页面 -->
<!-- 	<bean id="exceptionResolver"
		class="com.eucita.viewscope.web.ExceptionMappingResolver">
		<property name="defaultStatusCode" value="200" />
		<property name="exceptionMappings">
			<props>
				<prop
					key="com.eucita.viewscope.exception.I18nException">
					ftl/i18n_exception
				</prop>
				<prop key="java.lang.Exception">json/error</prop>
			</props>
		</property>
	</bean> -->
	
	<bean id="performanceMonitorListener" class="feng.shi.web.PerformanceMonitorListener" />
	
</beans>