<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
   
    <!-- PropertiesMethodNameResolver  定死一个 请求对应一个方法  -->
	<bean id="propertiesMethodNameResolver" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
	    <property name="mappings">
	        <props>
	              <prop key="/user/create">create</prop>
	              <prop key="/user/update">update</prop>
	              <prop key="/user/delete">delete</prop>
	              <prop key="/user/list">list</prop>
	              <!-- 默认的行为 -->
	              <prop key="/**">list</prop>
	        </props>
	    </property>
	</bean>
	
	<!-- ParameterMethodNameResolver -->
	<bean id="parameterMethodNameResolver" class="org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver">
		<!-- 1、根据请求参数名解析功能方法名 -->
		<property name="methodParamNames" value="create,update,delete" /> <!-- 如果请求中含有 create,update,delete参数名称的话 直接调用同名的方法 -->
		<!-- 2、根据请求参数名的值解析功能方法名 -->
		<property name="paramName" value="action" />  <!-- action=methodName 根据action参数的值 找到对应的方法名称 -->
		<!-- 3、逻辑方法名到真实方法名的映射 -->
		<property name="logicalMappings">  <!-- 最后如果存在 logicalMapping的设置 在第二步得到的 method(认为是逻辑方法名称)需要找到 最终的实际方法名称 ,如果没有找到对应的话 使用第二步的方法名称-->
			<props>
				<prop key="doList">list</prop>
			</props>
		</property>
		<!-- 4、默认执行的功能处理方法 -->
		<property name="defaultMethodName" value="list" /> <!-- 如果前三步都没有找到对应的方法名称 使用defaultMethodName -->
	</bean>   
	
	<!-- 默认的InternalPathMethodNameResolver将进行如下解析：
		http://localhost:9080/springmvc-chapter4/user/list    ==> list方法名；
		http://localhost:9080/springmvc-chapter4/user/create  ==> create方法名；
		http://localhost:9080/springmvc-chapter4/user/update  ==> update功能处理方法名；
		http://localhost:9080/springmvc-chapter4/user/delete  ==> delete功能处理方法名。
	 -->
	
	<bean id="userService" class="feng.shi.service.impl.UserServiceImpl"/>
	   
	<!-- MultiActionController  -->
   <bean name="/user/**" class="feng.shi.controller.UserController">
       <property name="userService" ref="userService"/>
       <property name="createView" value="user/create"/>
       <property name="updateView" value="user/update"/>
       <property name="deleteView" value="user/delete"/>
       <property name="listView" value="user/list"/>
       <property name="redirectToListView" value="redirect:/user/list"/>
       <!-- 使用PropertiesMethodNameResolver来解析功能处理方法名 -->       
       <!--property name="methodNameResolver" ref="propertiesMethodNameResolver"/-->
   </bean>
   
   
   <!-- chapter 4-7  Errors BindResult BindException -->
	<bean name="/dataBindError" class="feng.shi.controller.DataBinderErrorTestController">
		<property name="formView" value="bindAndValidate/input" />
		<property name="successView" value="bindAndValidate/success" />
	</bean>
	<!-- chapter 4-7 validator test -->
	<bean id="userModelValidator" class="feng.shi.controller.support.validator.UserModelValidator"/>  
	<bean name="/validator" class="feng.shi.controller.RegisterSimpleFormController">  
	    <property name="formView" value="registerAndValidator"/>  
	    <property name="successView" value="redirect:/success"/>  
	    <property name="validator" ref="userModelValidator"/>  
	</bean> 
	
</beans>