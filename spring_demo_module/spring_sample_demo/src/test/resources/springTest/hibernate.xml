<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop         
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/jee         
	http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	">

	 <bean id="myhibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    	<property name="properties">
			<bean class="cjava.walker.testcase.HibernatePropertiesReader" factory-method="read">
				<constructor-arg value="org/springframework/feature_test/config_test.properties" />
			</bean>			
    	</property>
    </bean>

	<bean id="hsqlDevBootstraper" class="cjava.walker.testcase.HsqlDevBootstrapper" init-method="start" destroy-method="stop"/>
	
	 <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" depends-on="hsqlDevBootstraper">
<!-- 	 	使用tomcat的数据源  jndi datasource -->
	 	<property name="jndiName" value="${jndi.hsqldb}"/>       
    </bean>
    
	<!--
		使用jee命名空間 同样达到用上述的效果 不过没有depend-on设置 
	  <jee:jndi-lookup id="dataSource" jndi-name="${jndi.hsqldb}" />
	-->
    
    <!-- Hibernate配置 -->
    <bean id="myAppSessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="cjava.walker.entity" />
        <property name="hibernateProperties" ref="myhibernateProperties" />
    </bean>
    
    <bean name="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="myAppSessionFactory" />
    </bean>
    
    <bean id="myAppTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
        <property name="transactionAttributes">
            <props>
                <prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
            </props>
        </property>
    </bean>
    
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    	<property name="sessionFactory">
            <ref bean="myAppSessionFactory"/>
        </property>
        <property name="allowCreate" value="true" />
        <property name="maxResults" value="50000" />
        <property name="flushModeName" value="FLUSH_COMMIT"/>
    </bean>
    
    <bean id="myappAbstractService" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interceptorNames">
            <list>
<!--                 <idref bean="myAppDeadlockRetryPointcutAdvisor"/> -->
                <idref bean="myAppTransactionInterceptor"/>
            </list>
        </property>
    </bean>
    
    <!--<bean id="testRepository" class="cjava.walker.common.repository.TestRepository">
    	<property name="hibernateTemplate" ref="hibernateTemplate" />
    </bean>
	-->
	<bean id="testRepository" parent="myappAbstractService">
		<!-- 指定proxyTargetClass=true 就强制使用cglib这时候需要确保加入了cglib依赖包! -->
		<property name="proxyTargetClass" value="true" /><!-- 
		<property name="proxyInterfaces">
			<list>
				<value>cjava.walker.common.repository.BaseRepository</value>
			</list>
		</property>
		--><property name="target">
			<bean class="cjava.walker.common.repository.GroupRepository">
    			<property name="hibernateTemplate" ref="hibernateTemplate" />
    		</bean>	
		</property>
	</bean>
	
	
	<!-- ///////////////////////////////////////////////////////////////////////////// -->
	
	<bean id="deadlockRetryPointcut" class="org.springframework.aop.support.annotation.AnnotationMatchingPointcut">
            <constructor-arg ><null/></constructor-arg>
            <constructor-arg value="cjava.walker.DeadlockRetry" />
    </bean>
  
    <bean id="deadlockRetryMethodInterceptor" class="cjava.walker.aop.DeadlockRetryMethodInterceptor" />
  
    <bean id="myAppDeadlockRetryPointcutAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
            <constructor-arg ref="deadlockRetryPointcut" />
            <constructor-arg ref="deadlockRetryMethodInterceptor" />        
    </bean>
</beans>