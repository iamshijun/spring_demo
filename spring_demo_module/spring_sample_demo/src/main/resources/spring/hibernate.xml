<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop         
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx         
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	">
	
	<bean id="deadlockRetryPointcut" class="org.springframework.aop.support.annotation.AnnotationMatchingPointcut">
		<constructor-arg>
			<null />
		</constructor-arg>
		<constructor-arg value="cjava.walker.annotation.DeadlockRetry" />
	</bean>

	<bean id="deadlockRetryMethodInterceptor" class="cjava.walker.aop.DeadlockRetryMethodInterceptor"  />

	<bean id="myAppDeadlockRetryPointcutAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<constructor-arg ref="deadlockRetryPointcut" />
		<constructor-arg ref="deadlockRetryMethodInterceptor" />
	</bean>

	<bean id="advisorAutoProxy" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
	</bean>

	
	 <bean id="myhibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    	<property name="properties">
			<props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            </props>
    	</property>
    </bean>
	
<!--     <bean id="myAppdataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"> -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialPoolSize" value="5"/>
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="50"/>
        <property name="acquireIncrement" value="10"/>
        <property name="maxIdleTime" value="10"/>        
    </bean>
   
    
	<!-- 使用tomcat的数据源  jndi datasource -->
	<!--  <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
	 	<property name="jndiName" value="java:comp/env/jdbc/datasource/myapp-ds"/>       
    </bean> -->
    
    <!-- Hibernate配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
<!--        <property name="dataSource" ref="myAppdataSource"/>-->
        <property name="packagesToScan" value="cjava.walker.entity" />
        <property name="hibernateProperties" ref="myhibernateProperties" />
    </bean>
    
    <bean name="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <bean id="myAppTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
        <property name="transactionAttributes">
            <props>
                <prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
            </props>
        </property>
    </bean>
    
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    	<property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
        <property name="allowCreate" value="true" />
        <property name="maxResults" value="50000" />
        <property name="flushModeName" value="FLUSH_COMMIT"/>
    </bean>
    
    <bean id="myappAbstractService" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interceptorNames">
            <list>
                <idref bean="myAppDeadlockRetryPointcutAdvisor"/>
                <idref bean="myAppTransactionInterceptor"/>
            </list>
        </property>
    </bean>
    
    <bean class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="dataSource" />
    </bean>
    
    
    
    <!-- tx:advice会生成一个 TransactionInterceptor (advice), 其中的 TransactionAttributeSource实现为NameMatchTransactionAttributeSource -->
	<!-- <tx:advice id="tx-advice">
	    <tx:attributes>
	        <tx:method name="*" propagation="REQUIRED"/>
	    </tx:attributes>
	</tx:advice> -->
	
	<bean class="cjava.walker.common.adivce.TestPointcutAdvice" id="testPointcutAdvice"/>
	
    <aop:config>
	    <aop:advisor pointcut="cjava.walker.common.adivce.SystemArchitecture.businessService()" advice-ref="testPointcutAdvice"/>
	</aop:config>
	
    
<!--     <tx:annotation-driven transaction-manager="transactionManager" mode="aspectj" proxy-target-class="true"/> -->
    
    <!--<bean id="testRepository" class="cjava.walker.common.repository.TestRepository">
    	<property name="hibernateTemplate" ref="hibernateTemplate" />
    </bean>
	
	<bean id="testRepository" parent="myappAbstractService">
     	<property name="proxyTargetClass" value="true" />
		<property name="proxyInterfaces">
			<list>
				<value>cjava.walker.common.repository.BaseRepository</value>
			</list>
		</property>
		
		<property name="target">
			<bean class="cjava.walker.common.repository.GroupRepository">
    			<property name="hibernateTemplate" ref="hibernateTemplate" />
    		</bean>	
		</property>
	</bean>
	-->
</beans>